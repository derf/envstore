#!/usr/bin/env perl
## envstore - save and load environment variables
## Copyright Â© 2009 by Daniel Friesel <derf@derf.homelinux.org>
## License: WTFPL <http://sam.zoy.org/wtfpl>
use strict;
use warnings;

my $store_file = "/tmp/.envstore-$>";
my %store;
my $action = shift;
my $arg = shift;
my $arg2 = shift;
my ($key, $value);

sub check_store {
	my ($mode, $uid);
	unless (-e $store_file) {
		return(0);
	}
	($mode, $uid) = (stat($store_file))[2,4];
	$mode &= 0x00077;
	if ($uid != $<) {
		print STDERR "envstore: store file not owned by us\n";
		exit(1);
	}
	if ($mode > 0) {
		print STDERR "envstore: store file writable by group/others\n";
		printf("%o", $mode);
		exit(1);
	}
	return(1);
}

sub load_store {
	my ($key, $value);
	return unless check_store;
	open(my $handle, '<', $store_file) or die("Cannot read $store_file: $!");
	while (<$handle>) {
		chomp;
		/^(\S+)\s+(.*)$/ or next;
		($key, $value) = ($1, $2);
		$store{$key} = $value;
	}
	close($handle);
}

sub save_store {
	my $key;
	umask(0077);
	open(my $handle, '>', $store_file) or die("Cannot open $store_file: $!");
	foreach $key (keys(%store)) {
		print $handle "$key\t$store{$key}\n";
	}
	close($handle);
}

sub get_keyvalue {
	my ($key, $value) = @_;
	unless (defined($value)) {
		if (exists($ENV{$key})) {
			$value = $ENV{$key};
		} else {
			print STDERR "No such parameter: $key";
			exit(1);
		}
	}
	return($key, $value);
}

load_store;
if ($action eq 'save') {
	($key, $value) = get_keyvalue($arg, $arg2);
	$store{$key} = $value;
	save_store;
} elsif ($action eq 'eval') {
	while (($key, $value) = each(%store)) {
		$value =~ s/'/'"'"'/g;
		print "export $key='$value'\n";
	}
} elsif ($action eq 'show') {
	while (($key, $value) = each(%store)) {
		printf("%-15s = %s\n", $key, $value);
	}
} elsif ($action eq 'rm') {
	delete($store{$arg});
	save_store;
} elsif ($action eq 'clear') {
	unlink($store_file);
} else {
	print STDERR "Usage: envstore <save|eval|show|rm|clear> [args]\n";
	exit(1);
}
__END__

=head1 NAME

envstore - save and restore environment variables

=head1 SYNOPSIS

B<envstore> I<command> [ I<arguments> ]

=head1 DESCRIPTION

envstore can safe and restore environment variables, thus transferring them
between different shells.

I<command> must be one of

=over

=item B<clear>

Forget all stored variables

=item B<eval>

Produce shell code for evaluation, restoring all saved variables

=item B<save> I<variable>[=I<value>]

Save I<variable> either with it's current shell value or with I<value>

=item B<show>

List saved variables in better readable format

=item B<rm> I<variable>

Remove I<variable> from store

=back
